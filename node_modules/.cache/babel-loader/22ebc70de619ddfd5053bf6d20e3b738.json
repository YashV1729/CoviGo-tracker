{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monuc\\\\Desktop\\\\hck\\\\winterHck\\\\react-covid-tracker-master\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff';\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796\n  });\n  const dfLocation = {\n    lat: 34.80746,\n    lng: -40.4796\n  };\n  const [mapZoom, setMapZoom] = useState(3);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        let sortedData = sortData(data);\n        setCountries(countries);\n        setMapCountries(data);\n        setTableData(sortedData);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n  console.log(casesType);\n\n  const onCountryChange = async e => {\n    const countryCode = e.target.value;\n    const url = // countryCode === \"worldwide\"\n    //   ? \"https://disease.sh/v3/covid-19/all\"\n    //   : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    countryCode !== \"worldwide\" ? `https://disease.sh/v3/covid-19/countries/${countryCode}` : \"https://disease.sh/v3/covid-19/all\";\n    await fetch(url).then(response => response.json()).then(data => {\n      setInputCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \" \", /*#__PURE__*/React.createElement(FlightTakeoffIcon, {\n    className: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 14\n    }\n  }), \" Covi.Go \"), \" \", /*#__PURE__*/React.createElement(FormControl, {\n    className: \"app__dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 72\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    variant: \"outlined\",\n    value: country,\n    onChange: onCountryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"worldwide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \" Worldwide \"), \" \", countries.map(country => /*#__PURE__*/React.createElement(MenuItem, {\n    value: country.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 42\n    }\n  }, \" \", country.name, \" \")), \" \"), \"  \"), \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app__stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InfoBox, {\n    onClick: e => setCasesType(\"cases\"),\n    title: \"Coronavirus Cases\",\n    isRed: true,\n    active: casesType === \"cases\",\n    cases: prettyPrintStat(countryInfo.todayCases),\n    total: numeral(countryInfo.cases).format(\"0.0a\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(InfoBox, {\n    onClick: e => setCasesType(\"recovered\"),\n    title: \"Recovered\",\n    active: casesType === \"recovered\",\n    cases: prettyPrintStat(countryInfo.todayRecovered),\n    total: numeral(countryInfo.recovered).format(\"0.0a\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }\n  }), \" \", /*#__PURE__*/React.createElement(InfoBox, {\n    onClick: e => setCasesType(\"deaths\"),\n    title: \"Deaths\",\n    isRed: true,\n    active: casesType === \"deaths\",\n    cases: prettyPrintStat(countryInfo.todayDeaths),\n    total: numeral(countryInfo.deaths).format(\"0.0a\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }\n  }), \" \"), \" \", /*#__PURE__*/React.createElement(Map, {\n    countries: mapCountries,\n    casesType: casesType,\n    center: mapCenter || dfLocation,\n    zoom: mapZoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }), \" \"), \" \", /*#__PURE__*/React.createElement(Card, {\n    className: \"app__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app__information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \" Live Cases by Country \"), /*#__PURE__*/React.createElement(Table, {\n    countries: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 12\n    }\n  }, \" Worldwide \", casesType, \" \"), \" \", /*#__PURE__*/React.createElement(LineGraph, {\n    casesType: casesType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 45\n    }\n  }), \" \"), \" \"), \" \"), \" \");\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/monuc/Desktop/hck/winterHck/react-covid-tracker-master/src/App.js"],"names":["React","useState","useEffect","FlightTakeoffIcon","MenuItem","FormControl","Select","Card","CardContent","InfoBox","LineGraph","Table","sortData","prettyPrintStat","numeral","Map","App","country","setInputCountry","countryInfo","setCountryInfo","countries","setCountries","mapCountries","setMapCountries","tableData","setTableData","casesType","setCasesType","mapCenter","setMapCenter","lat","lng","dfLocation","mapZoom","setMapZoom","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","console","log","onCountryChange","e","countryCode","target","url","long","todayCases","cases","format","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff';\nimport {\n    MenuItem,\n    FormControl,\n    Select,\n    Card,\n    CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n    const [country, setInputCountry] = useState(\"worldwide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [countries, setCountries] = useState([]);\n    const [mapCountries, setMapCountries] = useState([]);\n    const [tableData, setTableData] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n    const dfLocation = { lat: 34.80746, lng: -40.4796 }\n    const [mapZoom, setMapZoom] = useState(3);\n\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then((response) => response.json())\n            .then((data) => {\n                setCountryInfo(data);\n            });\n    }, []);\n\n    useEffect(() => {\n        const getCountriesData = async() => {\n            fetch(\"https://disease.sh/v3/covid-19/countries\")\n                .then((response) => response.json())\n                .then((data) => {\n                    const countries = data.map((country) => ({\n                        name: country.country,\n                        value: country.countryInfo.iso2,\n                    }));\n                    let sortedData = sortData(data);\n                    setCountries(countries);\n                    setMapCountries(data);\n                    setTableData(sortedData);\n                });\n        };\n\n        getCountriesData();\n    }, []);\n\n    console.log(casesType);\n\n    const onCountryChange = async(e) => {\n        const countryCode = e.target.value;\n\n        const url =\n            // countryCode === \"worldwide\"\n            //   ? \"https://disease.sh/v3/covid-19/all\"\n            //   : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n            countryCode !== \"worldwide\" ? `https://disease.sh/v3/covid-19/countries/${countryCode}` : \"https://disease.sh/v3/covid-19/all\";\n\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                setInputCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n            });\n    };\n\n    return ( <\n        div className = \"app\" >\n        <\n        div className = \"app__left\" >\n        <\n        div className = \"app__header\" >\n        <\n        h1 > < FlightTakeoffIcon className = \"logo\" / > Covi.Go < /h1> <\n        FormControl className = \"app__dropdown\" >\n        <\n        Select variant = \"outlined\"\n        value = { country }\n        onChange = { onCountryChange } >\n        <\n        MenuItem value = \"worldwide\" > Worldwide < /MenuItem> {\n            countries.map((country) => ( <\n                MenuItem value = { country.value } > { country.name } < /MenuItem>\n            ))\n        } <\n        /Select>  <\n        /FormControl> <\n        /div> <\n        div className = \"app__stats\" >\n        <\n        InfoBox onClick = {\n            (e) => setCasesType(\"cases\") }\n        title = \"Coronavirus Cases\"\n        isRed active = { casesType === \"cases\" }\n        cases = { prettyPrintStat(countryInfo.todayCases) }\n        total = { numeral(countryInfo.cases).format(\"0.0a\") }\n        /> <\n        InfoBox onClick = {\n            (e) => setCasesType(\"recovered\") }\n        title = \"Recovered\"\n        active = { casesType === \"recovered\" }\n        cases = { prettyPrintStat(countryInfo.todayRecovered) }\n        total = { numeral(countryInfo.recovered).format(\"0.0a\") }\n        /> <\n        InfoBox onClick = {\n            (e) => setCasesType(\"deaths\") }\n        title = \"Deaths\"\n        isRed active = { casesType === \"deaths\" }\n        cases = { prettyPrintStat(countryInfo.todayDeaths) }\n        total = { numeral(countryInfo.deaths).format(\"0.0a\") }\n        /> <\n        /div> <\n        Map countries = { mapCountries }\n        casesType = { casesType }\n        center = { mapCenter || dfLocation }\n        zoom = { mapZoom }\n        /> <\n        /div> <\n        Card className = \"app__right\" >\n        <\n        CardContent >\n        <\n        div className = \"app__information\" >\n        <\n        h3 > Live Cases by Country < /h3>\n\n        <\n        Table countries = { tableData }\n        /> <\n        h3 > Worldwide { casesType } < /h3> <\n        LineGraph casesType = { casesType }\n        /> <\n        /div> <\n        /CardContent> <\n        /Card> <\n        /div>\n    );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}