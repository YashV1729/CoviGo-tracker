{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","size","round","src","countryInfo","flag","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","center","zoom","TileLayer","url","attribution","Circle","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f86f586b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\nimport Avatar from 'react-avatar';\n\n\nfunction Table({ countries }) {\n    return ( <\n        >\n        <\n        div className = \"table\" > {\n            countries.map((country) => ( <\n                tr >\n\n                <\n                td > < Avatar size = \"30\"\n                round = \"50%\"\n                src = { country.countryInfo.flag } > < /Avatar></td >\n                <\n                td > { country.country } < /td> <\n                td >\n                <\n                strong > { numeral(country.cases).format(\"0,0\") } < /strong> <\n                /td> <\n                /tr>\n            ))\n        } <\n        /div>\n\n        <\n        />\n\n    );\n}\n\nexport default Table;","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n    const dfLocation = { lat: 34.80746, lng: -40.4796 }\n    return ( <\n        div className = \"map\" >\n        <\n        LeafletMap center = { center }\n        zoom = { zoom } >\n        <\n        TileLayer url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' /\n        > { showDataOnMap(countries, casesType) } <\n        /LeafletMap> <\n        /div>\n    );\n}\n\nexport default Map;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff';\nimport {\n    MenuItem,\n    FormControl,\n    Select,\n    Card,\n    CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n    const [country, setInputCountry] = useState(\"worldwide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [countries, setCountries] = useState([]);\n    const [mapCountries, setMapCountries] = useState([]);\n    const [tableData, setTableData] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n    const dfLocation = { lat: 34.80746, lng: -40.4796 }\n    const [mapZoom, setMapZoom] = useState(3);\n\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then((response) => response.json())\n            .then((data) => {\n                setCountryInfo(data);\n            });\n    }, []);\n\n    useEffect(() => {\n        const getCountriesData = async() => {\n            fetch(\"https://disease.sh/v3/covid-19/countries\")\n                .then((response) => response.json())\n                .then((data) => {\n                    const countries = data.map((country) => ({\n                        name: country.country,\n                        value: country.countryInfo.iso2,\n                    }));\n                    let sortedData = sortData(data);\n                    setCountries(countries);\n                    setMapCountries(data);\n                    setTableData(sortedData);\n                });\n        };\n\n        getCountriesData();\n    }, []);\n\n    console.log(casesType);\n\n    const onCountryChange = async(e) => {\n        const countryCode = e.target.value;\n\n        const url =\n            // countryCode === \"worldwide\"\n            //   ? \"https://disease.sh/v3/covid-19/all\"\n            //   : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n            countryCode !== \"worldwide\" ? `https://disease.sh/v3/covid-19/countries/${countryCode}` : \"https://disease.sh/v3/covid-19/all\";\n\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                setInputCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n            });\n    };\n\n    return ( <\n        div className = \"app\" >\n        <\n        div className = \"app__left\" >\n        <\n        div className = \"app__header\" >\n        <\n        h1 > < FlightTakeoffIcon className = \"logo\" / > Covi.Go < /h1> <\n        FormControl className = \"app__dropdown\" >\n        <\n        Select variant = \"outlined\"\n        value = { country }\n        onChange = { onCountryChange } >\n        <\n        MenuItem value = \"worldwide\" > Worldwide < /MenuItem> {\n            countries.map((country) => ( <\n                MenuItem value = { country.value } > { country.name } < /MenuItem>\n            ))\n        } <\n        /Select>  <\n        /FormControl> <\n        /div> <\n        div className = \"app__stats\" >\n        <\n        InfoBox onClick = {\n            (e) => setCasesType(\"cases\") }\n        title = \"Coronavirus Cases\"\n        isRed active = { casesType === \"cases\" }\n        cases = { prettyPrintStat(countryInfo.todayCases) }\n        total = { numeral(countryInfo.cases).format(\"0.0a\") }\n        /> <\n        InfoBox onClick = {\n            (e) => setCasesType(\"recovered\") }\n        title = \"Recovered\"\n        active = { casesType === \"recovered\" }\n        cases = { prettyPrintStat(countryInfo.todayRecovered) }\n        total = { numeral(countryInfo.recovered).format(\"0.0a\") }\n        /> <\n        InfoBox onClick = {\n            (e) => setCasesType(\"deaths\") }\n        title = \"Deaths\"\n        isRed active = { casesType === \"deaths\" }\n        cases = { prettyPrintStat(countryInfo.todayDeaths) }\n        total = { numeral(countryInfo.deaths).format(\"0.0a\") }\n        /> <\n        /div> <\n        Map countries = { mapCountries }\n        casesType = { casesType }\n        center = { mapCenter || dfLocation }\n        zoom = { mapZoom }\n        /> <\n        /div> <\n        Card className = \"app__right\" >\n        <\n        CardContent >\n        <\n        div className = \"app__information\" >\n        <\n        h3 > Live Cases by Country < /h3>\n\n        <\n        Table countries = { tableData }\n        /> <\n        h3 > Worldwide { casesType } < /h3> <\n        LineGraph casesType = { casesType }\n        /> <\n        /div> <\n        /CardContent> <\n        /Card> <\n        /div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}